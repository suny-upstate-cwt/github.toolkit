name: MkDocs gh-pages Publish

on:
  # Keep existing trigger for this repo
  push:
    branches: 
      - main
  # Add workflow_call to make it reusable
  workflow_call:
    inputs:
      python-version:
        description: 'Python version to use'
        default: '3.x'
        required: false
        type: string
      requirements-file:
        description: 'Path to requirements.txt'
        default: 'requirements.txt'
        required: false
        type: string
      readme-source:
        description: 'Source path for README.md'
        default: 'README.md'
        required: false
        type: string
      readme-destination:
        description: 'Destination path for README.md'
        default: 'docs/repo/inc/README.md'
        required: false
        type: string
      changelog-source:
        description: 'Source path for CHANGELOG.md'
        default: 'CHANGELOG.md'
        required: false
        type: string
      changelog-destination:
        description: 'Destination path for CHANGELOG.md'
        default: 'docs/repo/inc/CHANGELOG.md'
        required: false
        type: string
      license-source:
        description: 'Source path for LICENSE.md'
        default: 'LICENSE.md'
        required: false
        type: string
      license-destination:
        description: 'Destination path for LICENSE.md'
        default: 'docs/repo/inc/LICENSE.md'
        required: false
        type: string

jobs:
  deploy_gh_pages:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version || '3.x' }}
      - name: Install dependencies
        run: |
          pip install -r ${{ inputs.requirements-file || 'requirements.txt' }}
          pip install ruamel.yaml
      # Create necessary directories
      - name: Create documentation directories
        run: |
          mkdir -p docs/repo/inc
      # Copy files if they exist
      - name: Copy repository files
        run: |
          [ -f ${{ inputs.readme-source || 'README.md' }} ] && cp ${{ inputs.readme-source || 'README.md' }} ${{ inputs.readme-destination || 'docs/repo/inc/README.md' }} || echo "README.md not found"
          [ -f ${{ inputs.changelog-source || 'CHANGELOG.md' }} ] && cp ${{ inputs.changelog-source || 'CHANGELOG.md' }} ${{ inputs.changelog-destination || 'docs/repo/inc/CHANGELOG.md' }} || echo "CHANGELOG.md not found"
          [ -f ${{ inputs.license-source || 'LICENSE.md' }} ] && cp ${{ inputs.license-source || 'LICENSE.md' }} ${{ inputs.license-destination || 'docs/repo/inc/LICENSE.md' }} || echo "LICENSE.md not found"
      # Create repository index file
      - name: Create repository index file
        shell: bash
        run: |
          cat << 'EOFMARKDOWN' > docs/repo/index.md
          # GitHub Core Repository

          ## GitHub Core Repository Files

          === "README.md"

              *Below is the Github Core Repository Readme*

              {% filter indent(width=4) %}{% include 'repo/inc/README.md' ignore missing %}{% endfilter %}

          === "CHANGELOG.md"

              *Below is the Github Core Repository Changelog*

              {% filter indent(width=4) %}{% include 'repo/inc/CHANGELOG.md' ignore missing %}{% endfilter %}

          === "LICENSE.md"

              *Below is the Github Core Repository License*

              {% filter indent(width=4) %}{% include 'repo/inc/LICENSE.md' ignore missing %}{% endfilter %}
          EOFMARKDOWN

      # Update MkDocs configuration
      - name: Update MkDocs configuration
        run: |
          cat > update_config.py << 'EOF'
          #!/usr/bin/env python3
          import sys
          import ruamel.yaml

          def update_mkdocs_config(file_path='mkdocs.yml'):
              yaml = ruamel.yaml.YAML()
              yaml.preserve_quotes = True
              yaml.indent(mapping=2, sequence=4, offset=2)
              
              try:
                  with open(file_path, 'r') as file:
                      config = yaml.load(file)
              except FileNotFoundError:
                  print(f"Error: {file_path} not found")
                  sys.exit(1)

              # Initialize nav if it doesn't exist
              if 'nav' not in config:
                  config['nav'] = []

              def find_repository_entry(nav_items):
                  """Recursively search for 'repo/index.md' in navigation"""
                  if not isinstance(nav_items, list):
                      return False

                  for item in nav_items:
                      if isinstance(item, dict):
                          # Check direct value
                          for _, value in item.items():
                              if value == 'repo/index.md':
                                  return True
                              # Recurse into nested structures
                              if isinstance(value, list):
                                  if find_repository_entry(value):
                                      return True
                  return False

              def add_repository_entry(nav_items):
                  """Add repo entry to the most appropriate place"""
                  # If nav is empty, just add it
                  if not nav_items:
                      nav_items.append({'Repository': 'repo/index.md'})
                      return True

                  # Try to find a logical place for it
                  # First, look for sections like 'Repository', 'Docs', 'Documentation', etc.
                  preferred_sections = ['Repository', 'Documentation', 'Docs', 'Home']
                  
                  for section in preferred_sections:
                      for item in nav_items:
                          if isinstance(item, dict) and section in item:
                              if isinstance(item[section], list):
                                  item[section].append({'Repository Files': 'repo/index.md'})
                                  return True
                              else:
                                  # Convert string value to list
                                  current_value = item[section]
                                  item[section] = [current_value, {'Repository Files': 'repo/index.md'}]
                                  return True

                  # If no preferred section found, add it at root level
                  nav_items.append({'Repository Files': 'repo/index.md'})
                  return True

              # Check if repo/index.md exists anywhere in the navigation
              if not find_repository_entry(config['nav']):
                  add_repository_entry(config['nav'])
                  print("Added Repository entry to navigation")
              else:
                  print("Repository entry already exists")

              # Write the updated configuration
              with open(file_path, 'w') as file:
                  yaml.dump(config, file)

          if __name__ == '__main__':
              update_mkdocs_config()
          EOF
          python update_config.py
      - run: mkdocs gh-deploy --force
